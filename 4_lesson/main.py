# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

'''
def funk_money(hours, rate, prize):
    return (hours * rate) + prize

# задаем в ручную
print('Заработная плата сотрудника: ', funk_money(1, 1500, 0))

# через запрос от пользователя
h = int(input('Укажите кол-во отработанных часов: '))
r = int(input('Укажите ставку: '))
p = int(input('Укажите премию сотрудника: '))
print('Заработная плата сотрудника: ', funk_money(h, r, p))
'''

# 2. Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

'''
# вроде решил и доволен собой, но как то слишком массивно смотрится, а как укоротить не понимаю...
# ведь цель наша написать работающий код и как можно короче, но со вторым у меня тут явно проблемы...
start_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
end_list = []
list_len = len(start_list)
n = 0
for el in start_list:
    if n == 0:
        n += 1
        continue
    elif n < list_len:
        if start_list[n] > start_list[n-1]:
            end_list.append(el)
            n = n + 1
        else:
            n = n + 1
    else:
        break
print('Первое решение через цикл.')
print(f'Было: {start_list}')
print(f'Стало: {end_list}')


# только потом увидел условие через генератор. разобрался, вроде работает но не знаю как убрать первые элемент 300
start_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
end_list = [el for n, el in enumerate(start_list) if start_list[n] > start_list[n - 1]]
print('Второе решение через генератор.')
print(f'Было:  {start_list}')
print(f'Стало:  {end_list}')
'''

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

'''
print([el for el in range(20, 240, 1) if el % 20 == 0 or el % 21 == 0])
'''

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

'''
start_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
end_list = [el for el in start_list if start_list.count(el) < 2]
print(end_list)
'''

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

'''
from functools import reduce

# ход мыслей
def multi_all(arg1, arg2):
    return arg1 * arg2
#b = [el for el in range(100, 1001) if el % 2 == 0]
#print(b)
#c = reduce(multi_all, b)
#print(c)

# попытался сжать
print(f'результат: {reduce(multi_all, [el for el in range(100, 1001) if el % 2 == 0])}')
'''

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

'''
# а) итератор, генерирующий целые числа, начиная с указанного,
from itertools import count

n = 0 # выводим только n кол-во первых элементов цикла
for el in count(int(input('Введите стартовое число '))):
    if n >= 10:
        break
    else:
        n += 1
        print(el)


# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
from itertools import cycle

n = 0 # выводим только n кол-во первых элементов цикла
my_list = [True, 100, 123, '123', 'repit', None]
for el in cycle(my_list):
    if n >= 10:
        break
    else:
        n += 1
        print(el)
'''

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''
def fact(n):
    res = 1
    for el in range(0, n):
        res = res * (el + 1)
        yield res

#print(f"Все этапы факториала: {[el for el in fact(int(input('введите число для факториала: ')))]}")
print(f"Все этапы факториала: {[el for el in fact(10)]}")
'''

'''
from math import factorial

def fact(n):
    yield factorial(n)

print(f'fact = {[el for el in fact(10)]}')
'''
